import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.base.Strings.isNullOrEmpty;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import com.google.api.client.util.IOUtils;
import com.google.api.client.util.Strings;
import com.google.common.io.Closeables;

public class WhiteLabelingServlet extends HttpServlet {

	protected void service(HttpServletRequest request,
						   HttpServletResponse response) throws IOException, ServletException {
		String c = (String) request.getParameter("c"); // css file
		String j = (String) request.getParameter("j"); // js file
		String a = (String) request.getParameter("a"); // avatar image
		String i = (String) request.getParameter("i"); // image
		String h = (String) request.getParameter("h"); // html file
		String t = (String) request.getParameter("t"); // theme
		String s = request.getServerName();
		logger.info("ServerName={}", s);

		if (isNullOrEmpty(t)) {
			for (Pattern p : wlMap.keySet()) {
				Matcher matcher = p.matcher(s);
				if (matcher.find()) {
					t = wlMap.get(p);
					break;
				}
			}
		}
		if (t == null) {
			t = defaultTheme;
		}

		File comFile = null;
		File file = null;
		if (j != null) {
			t += "/j.js";
			comFile = new File(resDir, "theme/common/j.js");
			file = new File(resDir, "theme/" + t);
			response.setContentType("text/javascript");
		} else if (c != null) {
			t += "/c.css";
			comFile = new File(resDir, "theme/common/c.css");
			file = new File(resDir, "theme/" + t);
			response.setContentType("text/css");
		} else if (h != null) {
			t += "/" + extractFilename(h);
			file = new File(resDir, "theme/" + t);
			if (h.endsWith(".css")) {
				response.setContentType("text/css");
			} else if (h.endsWith(".js")) {
				response.setContentType("text/javascript");
			} else if (h.endsWith(".html")) {
				response.setContentType("text/html");
			}
		} else if (a != null) {
			a = extractFilename(a);
			String[] toks = a.split("\\.");
			if (toks.length == 0) {
				return;
			}
			file = new File(resDir, "avatar/" + a);
			response.setContentType("image/" + toks[toks.length - 1]);
		} else if (i != null) {
			i = extractFilename(i);
			String[] toks = i.split("\\.");
			if (toks.length == 0) {
				return;
			}
			t += "/" + i;
			file = new File(resDir, "theme/" + t);
			response.setContentType("image/" + toks[toks.length - 1]);
		} else {
			//TODO
		}
		if (comFile != null && comFile.exists()) {
			boolean applyCommon = true; // by default
			if (!isNullOrEmpty(applyCommonByDomain)) {
				// specific
				applyCommon = false;
				String[] hosts = applyCommonByDomain.split(",");
				for (String host : hosts) {
					for (Pattern p : wlMap.keySet()) {
						Matcher matcher = p.matcher(host);
						if (matcher.find()) {
							applyCommon = true;
							break;
						}
					}
				}
			}
			if (applyCommon) {
				if (comFile.exists()) {
					FileInputStream fis = new FileInputStream(comFile);
					IOUtils.copy(fis, response.getOutputStream());
					Closeables.close(fis, false);
				}
			}
		}
		if (file != null && file.exists()) {
			FileInputStream fis = new FileInputStream(file);
			IOUtils.copy(fis, response.getOutputStream());
			Closeables.close(fis, false);
		}
	}
}