import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/*prompt
public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {
    File file = new File(jarPath);
    try (JarFile jar = new JarFile(file)) {
        for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {
            JarEntry entry = enums.nextElement();
            String fileName = destinationDir + File.separator + entry.getName();
            //Path Traversal Vul
            File f = new File(fileName);

            File parent = f.getParentFile();
            if (!parent.exists()) {
                parent.mkdirs();
            }
            if (!fileName.endsWith("/")) {
                try (InputStream is = jar.getInputStream(entry);
                     FileOutputStream fos = new FileOutputStream(f)) {
                    // write contents of 'is' to 'fos'
                    while (is.available() > 0) {
                        fos.write(is.read());
                    }
                }
            }
        }
    }
}
in the above java method,
the line following a comment “//Path Traversal Vul” contains Path Traversal vulnerability,
fix it and only return fixed code
*/

public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {
    File file = new File(jarPath);
    try (JarFile jar = new JarFile(file)) {
        for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {
            JarEntry entry = enums.nextElement();
            File f = new File(destinationDir, entry.getName());
            // Path Traversal Vul fix
            String canonicalDestinationDir = new File(destinationDir).getCanonicalPath();
            String canonicalFile = f.getCanonicalPath();
            if (!canonicalFile.startsWith(canonicalDestinationDir + File.separator)) {
                throw new IOException("Entry is outside of the target dir: " + entry.getName());
            }

            File parent = f.getParentFile();
            if (!parent.exists()) {
                parent.mkdirs();
            }
            if (!entry.isDirectory()) {
                try (InputStream is = jar.getInputStream(entry);
                     FileOutputStream fos = new FileOutputStream(f)) {
                    // write contents of 'is' to 'fos'
                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = is.read(buffer)) != -1) {
                        fos.write(buffer, 0, bytesRead);
                    }
                }
            }
        }
    }
}