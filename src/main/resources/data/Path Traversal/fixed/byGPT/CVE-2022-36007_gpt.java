import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.github.jlangch.venice.VncException;
import com.github.jlangch.venice.impl.util.io.zip.ZipFileSystemUtil;
import com.github.jlangch.venice.javainterop.ILoadPaths;

/*prompt
public class LoadPaths implements ILoadPaths {

    private boolean isFileWithinDirectory(final File dir, final File file) throws IOException {
        final File dir_ = dir.getAbsoluteFile();
        if (dir_.isDirectory()) {
            final File fl = new File(dir_, file.getPath());
            if (fl.isFile()) {
                //The following line contain Path Traversal vulnerability
                if (fl.getCanonicalPath().startsWith(dir_.getCanonicalPath())) {
                    // Prevent accessing files outside the load-path.
                    // E.g.: ../../coffee
                    return true;
                }
            }
        }
        return false;
    }
}
in the above java method, the line following a comment “//The following line contain Path Traversal vulnerability” contains Path Traversal vulnerability, can you fix it
 */
public class LoadPaths implements ILoadPaths {

    private boolean isFileWithinDirectory(final File dir, final File file) throws IOException {
        final File dir_ = dir.getAbsoluteFile();
        if (dir_.isDirectory()) {
            final File fl = new File(dir_, file.getPath());
            if (fl.isFile()) {
                Path dirPath = dir_.toPath().toRealPath();
                Path filePath = fl.toPath().toRealPath();
                if (filePath.startsWith(dirPath)) {
                    // Prevent accessing files outside the load-path.
                    // E.g.: ../../coffee
                    return true;
                }
            }
        }
        return false;
    }
}