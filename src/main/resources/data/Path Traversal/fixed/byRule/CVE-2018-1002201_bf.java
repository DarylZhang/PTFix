import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.zeroturnaround.zip.commons.FileUtils;
import org.zeroturnaround.zip.commons.FilenameUtils;
import org.zeroturnaround.zip.commons.IOUtils;
import org.zeroturnaround.zip.transform.ZipEntryTransformer;
import org.zeroturnaround.zip.transform.ZipEntryTransformerEntry;

public final class ZipUtil {

    public void process(InputStream in, ZipEntry zipEntry) throws IOException {
        String name = mapper.map(zipEntry.getName());
        if (name != null) {
            //Path Traversal Vul
            File file = new File(outputDir, name);
            if (zipEntry.isDirectory()) {
                FileUtils.forceMkdir(file);
            } else {
                FileUtils.forceMkdir(file.getParentFile());
                if (log.isDebugEnabled() && file.exists()) {
                    log.debug("Overwriting file '{}'.", zipEntry.getName());
                }
                FileUtils.copy(in, file);
            }
            ZTFilePermissions permissions = ZipEntryUtil.getZTFilePermissions(zipEntry);
            if (permissions != null) {
                ZTFilePermissionsUtil.getDefaultStategy().setPermissions(file, permissions);
            }
        }
    }
}