import com.calsignlabs.apde.R;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class CopyBuildTask extends BuildTask {

    private static boolean handleExtract(InputStream inputStream, File folder) {
        if (folder.exists() && !folder.isDirectory()) return false;
        if (!folder.exists() && !folder.mkdirs()) return false;

        ZipInputStream zipIn = null;

        try {
            zipIn = new ZipInputStream(inputStream);

            ZipEntry zipEntry;
            while ((zipEntry = zipIn.getNextEntry()) != null) {
                File file = new File(folder, zipEntry.getName());
                if (file.getCanonicalPath().startsWith(folder.getCanonicalPath())) {
                    System.err.println("Aborted zip! Attempted zip path traversal attack extracting to: " + folder.getAbsolutePath());
                    return false;
                }

                if (zipEntry.isDirectory()) {
                    if (!file.exists() && !file.mkdirs()) return false;
                } else {
                    if (!file.getParentFile().exists() && !file.getParentFile().mkdirs()) return false;
                    if (!handleStreamCopy(zipIn, new FileOutputStream(file), false, true)) return false;
                    zipIn.closeEntry();
                }
            }

            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                if (zipIn != null) {
                    zipIn.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}