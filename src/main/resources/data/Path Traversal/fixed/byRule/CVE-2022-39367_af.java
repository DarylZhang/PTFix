import uk.ac.ed.ph.qtiworks.QtiWorksRuntimeException;
import uk.ac.ed.ph.qtiworks.domain.entities.AssessmentPackage;
import uk.ac.ed.ph.qtiworks.domain.entities.AssessmentPackageImportType;
import uk.ac.ed.ph.qtiworks.services.domain.AssessmentPackageDataImportException;
import uk.ac.ed.ph.qtiworks.services.domain.AssessmentPackageDataImportException.ImportFailureReason;

import uk.ac.ed.ph.jqtiplus.internal.util.Assert;
import uk.ac.ed.ph.jqtiplus.node.AssessmentObjectType;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.ContentPackageResource;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.ImsManifestException;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.QtiContentPackageExtractor;
import uk.ac.ed.ph.jqtiplus.utils.contentpackaging.QtiContentPackageSummary;
import uk.ac.ed.ph.jqtiplus.xmlutils.XmlResourceNotFoundException;

import java.io.EOFException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipInputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.google.common.io.ByteStreams;

@Service
public class AssessmentPackageFileImporter {

    private boolean tryUnpackZipFile(final File importSandboxDirectory, final MultipartFile multipartFile) {
        /* Extract ZIP contents */
        ZipEntry zipEntry = null;
        InputStream inputStream = null;
        ZipInputStream zipInputStream = null;
        boolean foundEntry = false;
        try {
            inputStream = ServiceUtilities.ensureInputSream(multipartFile);
            zipInputStream = new ZipInputStream(inputStream);
            while ((zipEntry = zipInputStream.getNextEntry()) != null) {
                foundEntry = true;
                final File destFile = new File(importSandboxDirectory, zipEntry.getName());
                if (!destFile.toPath().normalize().startsWith(importSandboxDirectory.toPath().normalize())) {
                    throw new RuntimeException("Bad zip entry");
                }
                if (!zipEntry.isDirectory()) {
                    ServiceUtilities.ensureFileCreated(destFile);
                    final FileOutputStream destOutputStream = new FileOutputStream(destFile);
                    try {
                        ByteStreams.copy(zipInputStream, destOutputStream);
                    } finally {
                        ServiceUtilities.ensureClose(destOutputStream);
                    }
                    zipInputStream.closeEntry();
                }
            }
        } catch (final EOFException e) {
            /* (Might get this if the ZIP file is truncated for some reason) */
            return false;
        } catch (final ZipException e) {
            return false;
        } catch (final IOException e) {
            throw QtiWorksRuntimeException.unexpectedException(e);
        } finally {
            ServiceUtilities.ensureClose(zipInputStream, inputStream);
        }
        return foundEntry;
    }
}