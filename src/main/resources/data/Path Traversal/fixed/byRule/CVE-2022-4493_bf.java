import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.xml.bind.DatatypeConverter;

import org.freedesktop.BaseDirectory;
import org.scijava.download.DiskLocationCache;
import org.scijava.download.DownloadService;
import org.scijava.io.location.BytesLocation;
import org.scijava.io.location.FileLocation;
import org.scijava.io.location.Location;
import org.scijava.log.LogService;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;
import org.scijava.service.AbstractService;
import org.scijava.service.Service;
import org.scijava.task.Task;
import org.scijava.util.ByteArray;
import org.scijava.util.DigestUtils;

@Plugin(type = Service.class)
public class DefaultSampleFilesService extends AbstractService implements
        SampleFileService {

    private void downloadAndUnpackResource(final Location source,
                                           final File targetFolder) throws InterruptedException, ExecutionException,
            IOException {
        // allocate array
        final ByteArray byteArray = new ByteArray(1024 * 1024);
        log.debug("Started download of " + source.getURI());
        // Download the zip file
        final BytesLocation bytes = new BytesLocation(byteArray);
        final Task task = //
                downloadService.download(source, bytes, sourceCache()).task();
        task.waitFor();
        // extract to cache dir
        final byte[] buf = new byte[64 * 1024];
        final ByteArrayInputStream bais = new ByteArrayInputStream(//
                byteArray.getArray(), 0, byteArray.size());
        targetFolder.mkdirs();
        log.debug("Unpacking files");
        try (final ZipInputStream zis = new ZipInputStream(bais)) {
            while (true) {
                final ZipEntry entry = zis.getNextEntry();
                if (entry == null) break; // All done!
                final String name = entry.getName();
                //Path Traversal Vul
                final File outFile = new File(targetFolder, name);
                if (entry.isDirectory()) {
                    outFile.mkdirs();
                } else {
                    final int size = (int) entry.getSize();
                    int len = 0;
                    try (final FileOutputStream out = new FileOutputStream(outFile)) {
                        while (true) {
                            log.debug("Unpacking " + name + "; completion" + (double) len /
                                    size * 100 + "%");
                            final int r = zis.read(buf);
                            if (r < 0) break; // end of entry
                            len += r;
                            out.write(buf, 0, r);
                        }
                    }
                }
            }
        }
    }
}