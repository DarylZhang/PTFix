import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.Enumeration;

import javax.servlet.ServletException;

import Acme.Utils;
import Acme.Serve.Serve;
import Acme.Serve.WarDeployer;

public class WarRoller implements WarDeployer {

	public boolean deployWar(File warFile, File deployTarDir) {
		String context = warFile.getName();
		assert context.toLowerCase().endsWith(DEPLOY_ARCH_EXT);
		context = context.substring(0, context.length() - DEPLOY_ARCH_EXT.length());
		File failedMark = new File(deployTarDir, context + DEPLOY_FAILED_EXT);
		if (failedMark.exists() && failedMark.lastModified() > warFile.lastModified())
			return false; // skipping deploy failed
		server.log("Deploying " + context);
		ZipFile zipFile = null;
		File deployDir = new File(deployTarDir, context);
		boolean noincremental = System.getProperty(DEF_DEPLOY_NOINCREMENTAL) != null;
		if (assureDir(deployDir) == false) {
			server.log("Can't reach deployment dir " + deployDir);
			return false;
		}
		Exception lastException = null;
		deploy:
		do {
			try {
				// some overhead didn't check that doesn't exist
				zipFile = new ZipFile(warFile);
				Enumeration<? extends ZipEntry> entries = zipFile.entries();
				while (entries.hasMoreElements()) {
					ZipEntry ze = entries.nextElement();
					String en = ze.getName();
					if (File.separatorChar == '/')
						en = en.replace('\\', File.separatorChar);
					if (en.contains("../") || en.contains("/.."))
						throw new IOException("The file name " + en + " contains .. which can lead to a Path Traversal vulnerability");
					File outFile = new File(deployDir, en);
					if (ze.isDirectory()) {
						outFile.mkdirs();
					} else {
						OutputStream os = null;
						InputStream is = null;
						File parentFile = outFile.getParentFile();
						if (parentFile.exists() == false)
							parentFile.mkdirs();
						if (outFile.exists() && outFile.lastModified() >= ze.getTime()) {
							continue;
						}
						if (noincremental) {
							deleteFiles(deployDir, deployDir.list());
							noincremental = false;
							continue deploy;
						}
						try {
							os = new FileOutputStream(outFile);
							is = zipFile.getInputStream(ze);
							copyStream(is, os);
						} catch (IOException ioe2) {
							server.log("Problem in extracting " + en + " " + ioe2);
							// TODO decide to propagate the exception up and stop deployment?
							lastException = ioe2;
						} finally {
							try {
								os.close();
							} catch (Exception e2) {
							}
							try {
								is.close();
							} catch (Exception e2) {
							}
						}
						outFile.setLastModified(ze.getTime());
					}
				}
			} catch (ZipException ze) {
				server.log("Invalid .war format");
				lastException = ze;
			} catch (IOException ioe) {
				server.log("Can't read " + warFile + "/ " + ioe);
				lastException = ioe;
			} finally {
				try {
					zipFile.close();
				} catch (Exception e) {
				}
				zipFile = null;
			}
		} while (false);
		if (lastException == null) {
			deployDir.setLastModified(warFile.lastModified());
			return true;
		}
		deployDir.setLastModified(0);
		return false;
	}
}